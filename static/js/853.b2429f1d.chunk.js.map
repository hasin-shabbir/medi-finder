{"version":3,"file":"static/js/853.b2429f1d.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","qrcodegen","qrcodegen2","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","enumerable","configurable","writable","__spreadValues","a","b","prop","__objRest","source","exclude","target","indexOf","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","x","y","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","forEach","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","text","segs","QrSegment","makeSegments","encodeSegments","seg","makeBytes","dataUsedBits","minVersion","maxVersion","boostEcl","dataCapacityBits2","usedBits","getTotalBits","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","min","padByte","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","QrCode","val","len","cond","bitData","_QrSegment","Mode","BYTE","digits","isNumeric","parseInt","substr","NUMERIC","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","makeNumeric","makeAlphanumeric","toUtf8ByteArray","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","includeMargin","imageSettings","numCells","defaultSize","scale","width","height","excavate","floorX","floorY","Path2D","addPath","QRCodeSVG","props","_a","level","bgColor","fgColor","otherProps","encodeText","getModules","calculatedImageSettings","image","React","xlinkHref","src","preserveAspectRatio","fgPath","viewBox","fill","d","shapeRendering"],"sourceRoot":""}